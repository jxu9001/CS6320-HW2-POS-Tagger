import os
import collections

class HMMTagger:
    def __init__(self):
        self.sentences = []
        self.initial_tag_probs = collections.defaultdict(float)
        self.transition_probs = collections.defaultdict(float)
        self.emission_probs = collections.defaultdict(float)


    def load_corpus(self, path):
        """
        Loads each sentence in the corpus into a list.
        Each element of that list is a list in the form [(word_1, tag_1), (word_2, tag_2), ..., (word_n, tag_n)].
        """
        for file_name in os.listdir(path):
            with open(os.path.join(path, file_name)) as f:
                for l in f:
                    if l.strip():
                        # incomprehensible list comprehensions ftw
                        sentence = [tuple(map(str.lower, word_tag.split('/'))) for word_tag in l.split() if l.strip()]
                        self.sentences.append(sentence)


    def initialize_probabilities(self, sentences):
        """
        Given the list of sentences generated by load_corpus(), initialize the initial tag probabilities, the transition
        probabilities, and the emission probabilities.
        """
        pass


    def viterbi_decode(self, sentence):
        """
        Returns the most likely tag sequence for a given sentence using the Viterbi algorithm.
        If the given sentence is 'People race tomorrow.', this method may return [‘NOUN’, ‘VERB’, ‘NOUN’, ‘PUNCTUATION’]
        """
        pass
